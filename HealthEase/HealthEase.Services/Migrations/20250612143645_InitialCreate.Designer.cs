// <auto-generated />
using System;
using HealthEase.Services.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthEase.Services.Migrations
{
    [DbContext(typeof(HealthEaseContext))]
    [Migration("20250612143645_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HealthEase.Services.Database.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("AppointmentTime")
                        .HasColumnType("time");

                    b.Property<int>("AppointmentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusMessage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppointmentId");

                    b.HasIndex("AppointmentTypeId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            AppointmentId = 1,
                            AppointmentDate = new DateTime(2025, 6, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentTime = new TimeSpan(0, 10, 0, 0, 0),
                            AppointmentTypeId = 1,
                            DoctorId = 1,
                            IsDeleted = false,
                            IsPaid = false,
                            Note = "Requesting general checkup.",
                            PatientId = 1,
                            Status = "Pending"
                        },
                        new
                        {
                            AppointmentId = 2,
                            AppointmentDate = new DateTime(2025, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentTime = new TimeSpan(0, 11, 0, 0, 0),
                            AppointmentTypeId = 2,
                            DoctorId = 4,
                            IsDeleted = false,
                            IsPaid = false,
                            Note = "Consultation for recurring headaches.",
                            PatientId = 1,
                            Status = "Approved",
                            StatusMessage = "Approved"
                        },
                        new
                        {
                            AppointmentId = 3,
                            AppointmentDate = new DateTime(2025, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentTime = new TimeSpan(0, 9, 0, 0, 0),
                            AppointmentTypeId = 3,
                            DoctorId = 2,
                            IsDeleted = false,
                            IsPaid = true,
                            Note = "Lab results follow-up.",
                            PatientId = 2,
                            PaymentDate = new DateTime(2025, 4, 12, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Paid",
                            StatusMessage = "Payment completed"
                        },
                        new
                        {
                            AppointmentId = 4,
                            AppointmentDate = new DateTime(2025, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentTime = new TimeSpan(0, 14, 0, 0, 0),
                            AppointmentTypeId = 1,
                            DoctorId = 3,
                            IsDeleted = false,
                            IsPaid = true,
                            Note = "Scheduled preventive check.",
                            PatientId = 1,
                            PaymentDate = new DateTime(2025, 5, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Paid",
                            StatusMessage = "Payment completed"
                        },
                        new
                        {
                            AppointmentId = 5,
                            AppointmentDate = new DateTime(2025, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentTime = new TimeSpan(0, 13, 0, 0, 0),
                            AppointmentTypeId = 2,
                            DoctorId = 4,
                            IsDeleted = false,
                            IsPaid = true,
                            Note = "Consultation about recurring migraines.",
                            PatientId = 2,
                            PaymentDate = new DateTime(2025, 6, 10, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Paid",
                            StatusMessage = "Paid - consultation"
                        },
                        new
                        {
                            AppointmentId = 6,
                            AppointmentDate = new DateTime(2025, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentTime = new TimeSpan(0, 15, 0, 0, 0),
                            AppointmentTypeId = 1,
                            DoctorId = 5,
                            IsDeleted = false,
                            IsPaid = true,
                            Note = "General checkup.",
                            PatientId = 2,
                            PaymentDate = new DateTime(2025, 6, 16, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Paid",
                            StatusMessage = "Paid online"
                        },
                        new
                        {
                            AppointmentId = 7,
                            AppointmentDate = new DateTime(2025, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentTime = new TimeSpan(0, 10, 0, 0, 0),
                            AppointmentTypeId = 3,
                            DoctorId = 6,
                            IsDeleted = false,
                            IsPaid = true,
                            Note = "Pediatric consultation.",
                            PatientId = 3,
                            PaymentDate = new DateTime(2025, 6, 19, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Paid",
                            StatusMessage = "Payment confirmed"
                        },
                        new
                        {
                            AppointmentId = 8,
                            AppointmentDate = new DateTime(2025, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentTime = new TimeSpan(0, 12, 0, 0, 0),
                            AppointmentTypeId = 4,
                            DoctorId = 7,
                            IsDeleted = false,
                            IsPaid = false,
                            Note = "Dermatology check.",
                            PatientId = 2,
                            Status = "Declined",
                            StatusMessage = "Doctor unavailable"
                        },
                        new
                        {
                            AppointmentId = 10,
                            AppointmentDate = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentTime = new TimeSpan(0, 12, 0, 0, 0),
                            AppointmentTypeId = 2,
                            DoctorId = 1,
                            IsDeleted = false,
                            IsPaid = false,
                            Note = "Follow-up visit.",
                            PatientId = 1,
                            Status = "Approved",
                            StatusMessage = "See you on time"
                        });
                });

            modelBuilder.Entity("HealthEase.Services.Database.AppointmentType", b =>
                {
                    b.Property<int>("AppointmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentTypeId"));

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("AppointmentTypeId");

                    b.ToTable("AppointmentTypes");

                    b.HasData(
                        new
                        {
                            AppointmentTypeId = 1,
                            IsDeleted = false,
                            Name = "General Checkup",
                            Price = 50m
                        },
                        new
                        {
                            AppointmentTypeId = 2,
                            IsDeleted = false,
                            Name = "Consultation",
                            Price = 80m
                        },
                        new
                        {
                            AppointmentTypeId = 3,
                            IsDeleted = false,
                            Name = "Examination",
                            Price = 100m
                        },
                        new
                        {
                            AppointmentTypeId = 4,
                            IsDeleted = false,
                            Name = "Follow-up",
                            Price = 40m
                        });
                });

            modelBuilder.Entity("HealthEase.Services.Database.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("StateMachine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId");

                    b.HasIndex("UserId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            DoctorId = 1,
                            Biography = "Expert in internal medicine with 10+ years of experience.",
                            IsDeleted = false,
                            StateMachine = "active",
                            Title = "Dr. med.",
                            UserId = 3
                        },
                        new
                        {
                            DoctorId = 2,
                            Biography = "Cardiologist and neurologist. Strong academic background.",
                            IsDeleted = false,
                            StateMachine = "active",
                            Title = "Dr. sci. med.",
                            UserId = 4
                        },
                        new
                        {
                            DoctorId = 3,
                            Biography = "Pediatrician known for working with children and parents.",
                            IsDeleted = false,
                            StateMachine = "active",
                            Title = "Mr. sci. med.",
                            UserId = 5
                        },
                        new
                        {
                            DoctorId = 4,
                            Biography = "Dermatologist with focus on autoimmune diseases.",
                            IsDeleted = false,
                            StateMachine = "active",
                            Title = "Dr. med.",
                            UserId = 6
                        },
                        new
                        {
                            DoctorId = 5,
                            Biography = "Renowned orthopedic surgeon with innovative approach.",
                            IsDeleted = false,
                            StateMachine = "active",
                            Title = "Dr. med.",
                            UserId = 7
                        },
                        new
                        {
                            DoctorId = 6,
                            Biography = "Ophthalmologist specialized in laser vision correction.",
                            IsDeleted = false,
                            StateMachine = "active",
                            Title = "Dr. med.",
                            UserId = 8
                        },
                        new
                        {
                            DoctorId = 7,
                            Biography = "ENT specialist, passionate about minimally invasive surgery.",
                            IsDeleted = false,
                            StateMachine = "active",
                            Title = "Dr. med.",
                            UserId = 9
                        },
                        new
                        {
                            DoctorId = 8,
                            Biography = "Experienced oncologist, published over 20 papers.",
                            IsDeleted = false,
                            StateMachine = "active",
                            Title = "Dr. sci. med.",
                            UserId = 10
                        },
                        new
                        {
                            DoctorId = 9,
                            Biography = "Pulmonologist focusing on chronic lung diseases.",
                            IsDeleted = false,
                            StateMachine = "active",
                            Title = "Dr. med.",
                            UserId = 11
                        },
                        new
                        {
                            DoctorId = 10,
                            Biography = "Gastroenterologist with holistic patient approach.",
                            IsDeleted = false,
                            StateMachine = "active",
                            Title = "Dr. med.",
                            UserId = 12
                        },
                        new
                        {
                            DoctorId = 11,
                            Biography = "Endocrinologist, specialist for diabetes.",
                            IsDeleted = false,
                            StateMachine = "active",
                            Title = "Dr. med.",
                            UserId = 13
                        },
                        new
                        {
                            DoctorId = 12,
                            Biography = "General surgeon, expert in abdominal surgery.",
                            IsDeleted = false,
                            StateMachine = "active",
                            Title = "Dr. med.",
                            UserId = 14
                        },
                        new
                        {
                            DoctorId = 13,
                            Biography = "Psychiatrist with focus on youth mental health.",
                            IsDeleted = false,
                            StateMachine = "active",
                            Title = "Dr. sci. med.",
                            UserId = 15
                        },
                        new
                        {
                            DoctorId = 14,
                            Biography = "Urologist, pioneer in new surgical techniques.",
                            IsDeleted = false,
                            StateMachine = "active",
                            Title = "Dr. med.",
                            UserId = 16
                        },
                        new
                        {
                            DoctorId = 15,
                            Biography = "Rheumatologist passionate about research.",
                            IsDeleted = false,
                            StateMachine = "active",
                            Title = "Dr. sci. med.",
                            UserId = 17
                        });
                });

            modelBuilder.Entity("HealthEase.Services.Database.DoctorSpecialization", b =>
                {
                    b.Property<int>("DoctorSpecializationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorSpecializationId"));

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("int");

                    b.HasKey("DoctorSpecializationId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("DoctorSpecializations");

                    b.HasData(
                        new
                        {
                            DoctorSpecializationId = 1,
                            DoctorId = 1,
                            IsDeleted = false,
                            SpecializationId = 1
                        },
                        new
                        {
                            DoctorSpecializationId = 2,
                            DoctorId = 2,
                            IsDeleted = false,
                            SpecializationId = 2
                        },
                        new
                        {
                            DoctorSpecializationId = 3,
                            DoctorId = 3,
                            IsDeleted = false,
                            SpecializationId = 3
                        },
                        new
                        {
                            DoctorSpecializationId = 4,
                            DoctorId = 4,
                            IsDeleted = false,
                            SpecializationId = 4
                        },
                        new
                        {
                            DoctorSpecializationId = 5,
                            DoctorId = 5,
                            IsDeleted = false,
                            SpecializationId = 2
                        },
                        new
                        {
                            DoctorSpecializationId = 6,
                            DoctorId = 6,
                            IsDeleted = false,
                            SpecializationId = 3
                        },
                        new
                        {
                            DoctorSpecializationId = 7,
                            DoctorId = 7,
                            IsDeleted = false,
                            SpecializationId = 1
                        },
                        new
                        {
                            DoctorSpecializationId = 8,
                            DoctorId = 8,
                            IsDeleted = false,
                            SpecializationId = 4
                        },
                        new
                        {
                            DoctorSpecializationId = 9,
                            DoctorId = 9,
                            IsDeleted = false,
                            SpecializationId = 2
                        },
                        new
                        {
                            DoctorSpecializationId = 10,
                            DoctorId = 10,
                            IsDeleted = false,
                            SpecializationId = 1
                        },
                        new
                        {
                            DoctorSpecializationId = 11,
                            DoctorId = 11,
                            IsDeleted = false,
                            SpecializationId = 3
                        },
                        new
                        {
                            DoctorSpecializationId = 12,
                            DoctorId = 12,
                            IsDeleted = false,
                            SpecializationId = 4
                        },
                        new
                        {
                            DoctorSpecializationId = 13,
                            DoctorId = 13,
                            IsDeleted = false,
                            SpecializationId = 1
                        },
                        new
                        {
                            DoctorSpecializationId = 14,
                            DoctorId = 14,
                            IsDeleted = false,
                            SpecializationId = 4
                        },
                        new
                        {
                            DoctorSpecializationId = 15,
                            DoctorId = 15,
                            IsDeleted = false,
                            SpecializationId = 3
                        });
                });

            modelBuilder.Entity("HealthEase.Services.Database.MedicalRecord", b =>
                {
                    b.Property<int>("MedicalRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalRecordId"));

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("MedicalRecordId");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalRecords");

                    b.HasData(
                        new
                        {
                            MedicalRecordId = 1,
                            IsDeleted = false,
                            Notes = "Alergic to pollen",
                            PatientId = 1
                        },
                        new
                        {
                            MedicalRecordId = 2,
                            IsDeleted = false,
                            Notes = "Blood type B-",
                            PatientId = 2
                        },
                        new
                        {
                            MedicalRecordId = 3,
                            IsDeleted = false,
                            Notes = "Sensitive to Ibuprofen",
                            PatientId = 3
                        });
                });

            modelBuilder.Entity("HealthEase.Services.Database.MedicalRecordEntry", b =>
                {
                    b.Property<int>("MedicalRecordEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalRecordEntryId"));

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntryType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicalRecordEntryId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("MedicalRecordEntries");

                    b.HasData(
                        new
                        {
                            MedicalRecordEntryId = 1,
                            Description = "Recurring migraine attacks since childhood.",
                            DoctorId = 1,
                            EntryDate = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntryType = "Diagnosis",
                            IsDeleted = false,
                            MedicalRecordId = 1,
                            Title = "Migrane"
                        },
                        new
                        {
                            MedicalRecordEntryId = 2,
                            Description = "Take 1 tablet every 8 hours as needed for pain.",
                            DoctorId = 1,
                            EntryDate = new DateTime(2025, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntryType = "Prescription",
                            IsDeleted = false,
                            MedicalRecordId = 1,
                            Title = "Ibuprofen 400mg"
                        },
                        new
                        {
                            MedicalRecordEntryId = 3,
                            Description = "Cholesterol slightly elevated. All other parameters within normal range.",
                            DoctorId = 2,
                            EntryDate = new DateTime(2025, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EntryType = "Diagnosis",
                            IsDeleted = false,
                            MedicalRecordId = 2,
                            Title = "Blood Test Results"
                        });
                });

            modelBuilder.Entity("HealthEase.Services.Database.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<string>("SenderType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MessageId");

                    b.HasIndex("PatientId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            MessageId = 1,
                            Content = "Hello, I have a question about my profile.",
                            IsDeleted = false,
                            IsRead = false,
                            PatientId = 1,
                            SenderId = 1,
                            SenderType = "Patient",
                            SentAt = new DateTime(2025, 6, 12, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            MessageId = 2,
                            Content = "Hi! How can I assist you today?",
                            IsDeleted = false,
                            IsRead = true,
                            PatientId = 1,
                            SenderId = 2,
                            SenderType = "User",
                            SentAt = new DateTime(2025, 6, 12, 9, 35, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            MessageId = 3,
                            Content = "Doctor, can I change my appointment date?",
                            IsDeleted = false,
                            IsRead = false,
                            PatientId = 1,
                            SenderId = 1,
                            SenderType = "Patient",
                            SentAt = new DateTime(2025, 6, 15, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        },
                        new
                        {
                            MessageId = 4,
                            Content = "Yes, please suggest a new date and I'll check my schedule.",
                            IsDeleted = false,
                            IsRead = true,
                            PatientId = 1,
                            SenderId = 3,
                            SenderType = "User",
                            SentAt = new DateTime(2025, 6, 15, 14, 5, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("HealthEase.Services.Database.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex("PatientId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            NotificationId = 1,
                            CreatedAt = new DateTime(2025, 6, 1, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsRead = true,
                            Message = "Your appointment with Dr. Robert Trahan is approved!",
                            PatientId = 1
                        },
                        new
                        {
                            NotificationId = 2,
                            CreatedAt = new DateTime(2025, 6, 2, 15, 10, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsRead = false,
                            Message = "Lab results are uploaded to your medical record.",
                            PatientId = 1
                        },
                        new
                        {
                            NotificationId = 3,
                            CreatedAt = new DateTime(2025, 6, 3, 10, 45, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsRead = false,
                            Message = "Your follow-up appointment was declined by Dr. Paul Ulrey. Please reschedule.",
                            PatientId = 2
                        },
                        new
                        {
                            NotificationId = 4,
                            CreatedAt = new DateTime(2025, 6, 3, 12, 15, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsRead = true,
                            Message = "Payment for appointment successfully processed.",
                            PatientId = 3
                        },
                        new
                        {
                            NotificationId = 5,
                            CreatedAt = new DateTime(2025, 6, 4, 9, 20, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsRead = false,
                            Message = "New doctor available: Dr. Helen Evans (Dermatology).",
                            PatientId = 3
                        });
                });

            modelBuilder.Entity("HealthEase.Services.Database.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("PatientId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            PatientId = 1,
                            Email = "mark.b@mail.com",
                            FirstName = "Mark",
                            IsDeleted = false,
                            LastName = "Brown",
                            PasswordHash = "O44iKOh/G//phQTcSDoD6bvVYJA=",
                            PasswordSalt = "xJWRSHLNdETt+kIqCoBJFg==",
                            PhoneNumber = "062123456",
                            RegistrationDate = new DateTime(2025, 4, 14, 22, 13, 13, 0, DateTimeKind.Unspecified),
                            Username = "mobile",
                            isActive = true
                        },
                        new
                        {
                            PatientId = 2,
                            Email = "lena.b@mail.com",
                            FirstName = "Lena",
                            IsDeleted = false,
                            LastName = "Burgess",
                            PasswordHash = "Y5PY6ThpfFSmRPQxSSgEEUfSMDc=",
                            PasswordSalt = "0gXuSZgjHZnAhePy8gl7RQ==",
                            PhoneNumber = "062111222",
                            RegistrationDate = new DateTime(2025, 4, 14, 22, 13, 13, 0, DateTimeKind.Unspecified),
                            Username = "lenab",
                            isActive = true
                        },
                        new
                        {
                            PatientId = 3,
                            Email = "donald.f@mail.com",
                            FirstName = "Donald",
                            IsDeleted = false,
                            LastName = "Foster",
                            PasswordHash = "qIpSzM06en3MCcODqz5q0JhtBJQ=",
                            PasswordSalt = "+tA31RiJ9vyUd2Lgu5jgNQ==",
                            PhoneNumber = "062345678",
                            RegistrationDate = new DateTime(2025, 4, 14, 22, 13, 13, 0, DateTimeKind.Unspecified),
                            Username = "donaldf",
                            isActive = true
                        });
                });

            modelBuilder.Entity("HealthEase.Services.Database.PatientDoctorFavorite", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("PatientId", "DoctorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("PatientDoctorFavorites");

                    b.HasData(
                        new
                        {
                            PatientId = 1,
                            DoctorId = 2,
                            CreatedAt = new DateTime(2025, 5, 22, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            PatientId = 1,
                            DoctorId = 5,
                            CreatedAt = new DateTime(2025, 5, 21, 14, 15, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            PatientId = 1,
                            DoctorId = 10,
                            CreatedAt = new DateTime(2025, 5, 21, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            PatientId = 2,
                            DoctorId = 3,
                            CreatedAt = new DateTime(2025, 5, 20, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            PatientId = 2,
                            DoctorId = 7,
                            CreatedAt = new DateTime(2025, 5, 19, 11, 45, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            PatientId = 2,
                            DoctorId = 12,
                            CreatedAt = new DateTime(2025, 5, 18, 17, 10, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            PatientId = 3,
                            DoctorId = 1,
                            CreatedAt = new DateTime(2025, 5, 22, 9, 20, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            PatientId = 3,
                            DoctorId = 6,
                            CreatedAt = new DateTime(2025, 5, 21, 10, 50, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            PatientId = 3,
                            DoctorId = 13,
                            CreatedAt = new DateTime(2025, 5, 20, 13, 5, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            PatientId = 2,
                            DoctorId = 14,
                            CreatedAt = new DateTime(2025, 5, 22, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("HealthEase.Services.Database.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            AppointmentId = 3,
                            Comment = "Excellent doctor, very thorough and kind.",
                            CreatedAt = new DateTime(2025, 5, 12, 12, 15, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 2,
                            IsDeleted = false,
                            PatientId = 2,
                            Rating = 5
                        },
                        new
                        {
                            ReviewId = 2,
                            AppointmentId = 4,
                            Comment = "Quick and professional, satisfied with the service.",
                            CreatedAt = new DateTime(2025, 6, 1, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 3,
                            IsDeleted = false,
                            PatientId = 1,
                            Rating = 4
                        },
                        new
                        {
                            ReviewId = 3,
                            AppointmentId = 5,
                            Comment = "Consultation was okay, but had to wait a bit.",
                            CreatedAt = new DateTime(2025, 7, 10, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 4,
                            IsDeleted = false,
                            PatientId = 2,
                            Rating = 3
                        },
                        new
                        {
                            ReviewId = 4,
                            AppointmentId = 6,
                            Comment = "Amazing, friendly staff and clear explanations.",
                            CreatedAt = new DateTime(2025, 7, 16, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 5,
                            IsDeleted = false,
                            PatientId = 2,
                            Rating = 5
                        },
                        new
                        {
                            ReviewId = 5,
                            AppointmentId = 7,
                            Comment = "Not satisfied with the approach.",
                            CreatedAt = new DateTime(2025, 7, 19, 11, 45, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 6,
                            IsDeleted = false,
                            PatientId = 3,
                            Rating = 2
                        });
                });

            modelBuilder.Entity("HealthEase.Services.Database.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Description = "Administrator with full access to settings, user permissions and platform operations.",
                            IsDeleted = false,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            Description = "Medical professional providing consultations and working with patients.",
                            IsDeleted = false,
                            RoleName = "Doctor"
                        },
                        new
                        {
                            RoleId = 3,
                            Description = "Supports doctors by managing appointments and assisting with patient coordination.",
                            IsDeleted = false,
                            RoleName = "Assistant"
                        });
                });

            modelBuilder.Entity("HealthEase.Services.Database.Specialization", b =>
                {
                    b.Property<int>("SpecializationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecializationId"));

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SpecializationId");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            SpecializationId = 1,
                            Description = "Specializes in diagnosing and treating diseases of the cardiovascular system.",
                            IsDeleted = false,
                            Name = "Cardiology"
                        },
                        new
                        {
                            SpecializationId = 2,
                            Description = "Focuses on the treatment of skin, hair, and nail disorders.",
                            IsDeleted = false,
                            Name = "Dermatology"
                        },
                        new
                        {
                            SpecializationId = 3,
                            Description = "Provides medical care for infants, children, and adolescents.",
                            IsDeleted = false,
                            Name = "Pediatrics"
                        },
                        new
                        {
                            SpecializationId = 4,
                            Description = "Deals with disorders of the nervous system including the brain and spinal cord.",
                            IsDeleted = false,
                            Name = "Neurology"
                        });
                });

            modelBuilder.Entity("HealthEase.Services.Database.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PayerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TransactionId");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.HasIndex("PatientId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            TransactionId = 1,
                            Amount = 60.0,
                            AppointmentId = 3,
                            IsDeleted = false,
                            PatientId = 1,
                            PayerId = "PAYER-003",
                            PaymentId = "PAYID-000003",
                            PaymentMethod = "PayPal",
                            TransactionDate = new DateTime(2025, 4, 12, 8, 15, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TransactionId = 2,
                            Amount = 75.0,
                            AppointmentId = 4,
                            IsDeleted = false,
                            PatientId = 1,
                            PayerId = "PAYER-004",
                            PaymentId = "PAYID-000004",
                            PaymentMethod = "PayPal",
                            TransactionDate = new DateTime(2025, 5, 1, 9, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TransactionId = 3,
                            Amount = 90.0,
                            AppointmentId = 5,
                            IsDeleted = false,
                            PatientId = 2,
                            PayerId = "PAYER-005",
                            PaymentId = "PAYID-000005",
                            PaymentMethod = "PayPal",
                            TransactionDate = new DateTime(2025, 6, 10, 11, 10, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TransactionId = 4,
                            Amount = 55.0,
                            AppointmentId = 6,
                            IsDeleted = false,
                            PatientId = 2,
                            PayerId = "PAYER-006",
                            PaymentId = "PAYID-000006",
                            PaymentMethod = "PayPal",
                            TransactionDate = new DateTime(2025, 6, 11, 14, 15, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TransactionId = 5,
                            Amount = 70.0,
                            AppointmentId = 7,
                            IsDeleted = false,
                            PatientId = 3,
                            PayerId = "PAYER-007",
                            PaymentId = "PAYID-000007",
                            PaymentMethod = "PayPal",
                            TransactionDate = new DateTime(2025, 6, 12, 10, 20, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("HealthEase.Services.Database.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "test@mai.com",
                            FirstName = "test",
                            IsDeleted = false,
                            LastName = "test",
                            PasswordHash = "wSG+yBth9HCj0O1AdRBL+CJjtR4=",
                            PasswordSalt = "c0MJh5XS8DYQtkJavp5lsA==",
                            PhoneNumber = "123456789",
                            Username = "test"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "admin@mail.com",
                            FirstName = "Admin",
                            IsDeleted = false,
                            LastName = "Test",
                            PasswordHash = "wSG+yBth9HCj0O1AdRBL+CJjtR4=",
                            PasswordSalt = "c0MJh5XS8DYQtkJavp5lsA==",
                            PhoneNumber = "000000000",
                            Username = "desktop"
                        },
                        new
                        {
                            UserId = 3,
                            Email = "robert.t@mail.com",
                            FirstName = "Robert",
                            IsDeleted = false,
                            LastName = "Trahan",
                            PasswordHash = "uAQkJu5IuKT3FArAvq4E5KbBzRI=",
                            PasswordSalt = "ppASfJlw8D6P+mNsl7bqMA==",
                            PhoneNumber = "062543234",
                            Username = "doctor"
                        },
                        new
                        {
                            UserId = 4,
                            Email = "paul.u@mail.com",
                            FirstName = "Paul",
                            IsDeleted = false,
                            LastName = "Ulrey",
                            PasswordHash = "uAQkJu5IuKT3FArAvq4E5KbBzRI=",
                            PasswordSalt = "ppASfJlw8D6P+mNsl7bqMA==",
                            PhoneNumber = "062222333",
                            Username = "doctor1"
                        },
                        new
                        {
                            UserId = 5,
                            Email = "james.l@mail.com",
                            FirstName = "James",
                            IsDeleted = false,
                            LastName = "Lozano",
                            PasswordHash = "uAQkJu5IuKT3FArAvq4E5KbBzRI=",
                            PasswordSalt = "ppASfJlw8D6P+mNsl7bqMA==",
                            PhoneNumber = "062958342",
                            Username = "doctor2"
                        },
                        new
                        {
                            UserId = 6,
                            Email = "helen.e@mail.com",
                            FirstName = "Helen",
                            IsDeleted = false,
                            LastName = "Evans",
                            PasswordHash = "uAQkJu5IuKT3FArAvq4E5KbBzRI=",
                            PasswordSalt = "ppASfJlw8D6P+mNsl7bqMA==",
                            PhoneNumber = "062332123",
                            Username = "doctor3"
                        },
                        new
                        {
                            UserId = 7,
                            Email = "james.s@mail.com",
                            FirstName = "James",
                            IsDeleted = false,
                            LastName = "Smith",
                            PasswordHash = "uAQkJu5IuKT3FArAvq4E5KbBzRI",
                            PasswordSalt = "ppASfJlw8D6P+mNsl7bqMA==",
                            PhoneNumber = "061222111",
                            Username = "james.s"
                        },
                        new
                        {
                            UserId = 8,
                            Email = "emma.j@mail.com",
                            FirstName = "Emma",
                            IsDeleted = false,
                            LastName = "Johnson",
                            PasswordHash = "uAQkJu5IuKT3FArAvq4E5KbBzRI",
                            PasswordSalt = "ppASfJlw8D6P+mNsl7bqMA==",
                            PhoneNumber = "060111222",
                            Username = "emma.j"
                        },
                        new
                        {
                            UserId = 9,
                            Email = "liam.w@mail.com",
                            FirstName = "Liam",
                            IsDeleted = false,
                            LastName = "Williams",
                            PasswordHash = "uAQkJu5IuKT3FArAvq4E5KbBzRI",
                            PasswordSalt = "ppASfJlw8D6P+mNsl7bqMA==",
                            PhoneNumber = "065333444",
                            Username = "liam.w"
                        },
                        new
                        {
                            UserId = 10,
                            Email = "olivia.b@mail.com",
                            FirstName = "Olivia",
                            IsDeleted = false,
                            LastName = "Brown",
                            PasswordHash = "uAQkJu5IuKT3FArAvq4E5KbBzRI",
                            PasswordSalt = "ppASfJlw8D6P+mNsl7bqMA==",
                            PhoneNumber = "064222333",
                            Username = "olivia.b"
                        },
                        new
                        {
                            UserId = 11,
                            Email = "mason.d@mail.com",
                            FirstName = "Mason",
                            IsDeleted = false,
                            LastName = "Davis",
                            PasswordHash = "uAQkJu5IuKT3FArAvq4E5KbBzRI",
                            PasswordSalt = "ppASfJlw8D6P+mNsl7bqMA==",
                            PhoneNumber = "063444555",
                            Username = "mason.d"
                        },
                        new
                        {
                            UserId = 12,
                            Email = "ava.m@mail.com",
                            FirstName = "Ava",
                            IsDeleted = false,
                            LastName = "Miller",
                            PasswordHash = "uAQkJu5IuKT3FArAvq4E5KbBzRI",
                            PasswordSalt = "ppASfJlw8D6P+mNsl7bqMA==",
                            PhoneNumber = "062111999",
                            Username = "ava.m"
                        },
                        new
                        {
                            UserId = 13,
                            Email = "lucas.g@mail.com",
                            FirstName = "Lucas",
                            IsDeleted = false,
                            LastName = "Garcia",
                            PasswordHash = "uAQkJu5IuKT3FArAvq4E5KbBzRI",
                            PasswordSalt = "ppASfJlw8D6P+mNsl7bqMA==",
                            PhoneNumber = "061555888",
                            Username = "lucas.g"
                        },
                        new
                        {
                            UserId = 14,
                            Email = "mia.r@mail.com",
                            FirstName = "Mia",
                            IsDeleted = false,
                            LastName = "Rodriguez",
                            PasswordHash = "uAQkJu5IuKT3FArAvq4E5KbBzRI",
                            PasswordSalt = "ppASfJlw8D6P+mNsl7bqMA==",
                            PhoneNumber = "065777666",
                            Username = "mia.r"
                        },
                        new
                        {
                            UserId = 15,
                            Email = "jack.m@mail.com",
                            FirstName = "Jack",
                            IsDeleted = false,
                            LastName = "Martinez",
                            PasswordHash = "uAQkJu5IuKT3FArAvq4E5KbBzRI",
                            PasswordSalt = "ppASfJlw8D6P+mNsl7bqMA==",
                            PhoneNumber = "064888777",
                            Username = "jack.m"
                        },
                        new
                        {
                            UserId = 16,
                            Email = "sophia.h@mail.com",
                            FirstName = "Sophia",
                            IsDeleted = false,
                            LastName = "Hernandez",
                            PasswordHash = "uAQkJu5IuKT3FArAvq4E5KbBzRI",
                            PasswordSalt = "ppASfJlw8D6P+mNsl7bqMA==",
                            PhoneNumber = "063666555",
                            Username = "sophia.h"
                        },
                        new
                        {
                            UserId = 17,
                            Email = "logan.l@mail.com",
                            FirstName = "Logan",
                            IsDeleted = false,
                            LastName = "Lopez",
                            PasswordHash = "uAQkJu5IuKT3FArAvq4E5KbBzRI",
                            PasswordSalt = "ppASfJlw8D6P+mNsl7bqMA==",
                            PhoneNumber = "061999222",
                            Username = "logan.l"
                        },
                        new
                        {
                            UserId = 18,
                            Email = "sabrina.g@mail.com",
                            FirstName = "Sabrina",
                            IsDeleted = false,
                            LastName = "Gallagher",
                            PasswordHash = "3JVNj98T0GrBkWatJPLYoaIqBEA=",
                            PasswordSalt = "/gLAN9q37ktD4sUpWLjN1g==",
                            PhoneNumber = "062532195",
                            Username = "assistant"
                        });
                });

            modelBuilder.Entity("HealthEase.Services.Database.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleId"));

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserRoleId = 1,
                            ChangeDate = new DateTime(2025, 3, 23, 22, 48, 41, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            RoleId = 2,
                            UserId = 3
                        },
                        new
                        {
                            UserRoleId = 2,
                            ChangeDate = new DateTime(2025, 3, 23, 22, 48, 41, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            RoleId = 2,
                            UserId = 4
                        },
                        new
                        {
                            UserRoleId = 3,
                            ChangeDate = new DateTime(2025, 3, 23, 22, 48, 41, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            RoleId = 2,
                            UserId = 5
                        },
                        new
                        {
                            UserRoleId = 4,
                            ChangeDate = new DateTime(2025, 3, 23, 22, 48, 41, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            RoleId = 2,
                            UserId = 6
                        },
                        new
                        {
                            UserRoleId = 5,
                            ChangeDate = new DateTime(2025, 3, 23, 22, 48, 41, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            RoleId = 2,
                            UserId = 7
                        },
                        new
                        {
                            UserRoleId = 6,
                            ChangeDate = new DateTime(2025, 3, 23, 22, 48, 41, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            RoleId = 2,
                            UserId = 8
                        },
                        new
                        {
                            UserRoleId = 7,
                            ChangeDate = new DateTime(2025, 3, 23, 22, 48, 41, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            RoleId = 2,
                            UserId = 9
                        },
                        new
                        {
                            UserRoleId = 8,
                            ChangeDate = new DateTime(2025, 3, 23, 22, 48, 41, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            RoleId = 2,
                            UserId = 10
                        },
                        new
                        {
                            UserRoleId = 9,
                            ChangeDate = new DateTime(2025, 3, 23, 22, 48, 41, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            RoleId = 2,
                            UserId = 11
                        },
                        new
                        {
                            UserRoleId = 10,
                            ChangeDate = new DateTime(2025, 3, 23, 22, 48, 41, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            RoleId = 2,
                            UserId = 12
                        },
                        new
                        {
                            UserRoleId = 11,
                            ChangeDate = new DateTime(2025, 3, 23, 22, 48, 41, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            RoleId = 2,
                            UserId = 13
                        },
                        new
                        {
                            UserRoleId = 12,
                            ChangeDate = new DateTime(2025, 3, 23, 22, 48, 41, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            RoleId = 2,
                            UserId = 14
                        },
                        new
                        {
                            UserRoleId = 13,
                            ChangeDate = new DateTime(2025, 3, 23, 22, 48, 41, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            RoleId = 2,
                            UserId = 15
                        },
                        new
                        {
                            UserRoleId = 14,
                            ChangeDate = new DateTime(2025, 3, 23, 22, 48, 41, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            RoleId = 2,
                            UserId = 16
                        },
                        new
                        {
                            UserRoleId = 15,
                            ChangeDate = new DateTime(2025, 3, 23, 22, 48, 41, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            RoleId = 2,
                            UserId = 17
                        },
                        new
                        {
                            UserRoleId = 16,
                            ChangeDate = new DateTime(2025, 3, 23, 22, 48, 41, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            UserRoleId = 17,
                            ChangeDate = new DateTime(2025, 3, 23, 22, 48, 41, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            RoleId = 3,
                            UserId = 18
                        },
                        new
                        {
                            UserRoleId = 18,
                            ChangeDate = new DateTime(2025, 3, 23, 22, 48, 41, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            RoleId = 1,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("HealthEase.Services.Database.WorkingHours", b =>
                {
                    b.Property<int>("WorkingHoursId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkingHoursId"));

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("WorkingHoursId");

                    b.HasIndex("UserId");

                    b.ToTable("WorkingHours");

                    b.HasData(
                        new
                        {
                            WorkingHoursId = 1,
                            Day = 1,
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            UserId = 3
                        },
                        new
                        {
                            WorkingHoursId = 2,
                            Day = 3,
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            UserId = 3
                        },
                        new
                        {
                            WorkingHoursId = 3,
                            Day = 5,
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            UserId = 3
                        },
                        new
                        {
                            WorkingHoursId = 4,
                            Day = 1,
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            UserId = 4
                        },
                        new
                        {
                            WorkingHoursId = 5,
                            Day = 2,
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            UserId = 4
                        },
                        new
                        {
                            WorkingHoursId = 6,
                            Day = 4,
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            UserId = 4
                        },
                        new
                        {
                            WorkingHoursId = 7,
                            Day = 3,
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            UserId = 5
                        },
                        new
                        {
                            WorkingHoursId = 8,
                            Day = 4,
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            UserId = 5
                        },
                        new
                        {
                            WorkingHoursId = 9,
                            Day = 5,
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            UserId = 5
                        },
                        new
                        {
                            WorkingHoursId = 10,
                            Day = 1,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            UserId = 6
                        },
                        new
                        {
                            WorkingHoursId = 11,
                            Day = 2,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            UserId = 6
                        },
                        new
                        {
                            WorkingHoursId = 12,
                            Day = 3,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0),
                            UserId = 6
                        },
                        new
                        {
                            WorkingHoursId = 13,
                            Day = 2,
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            UserId = 7
                        },
                        new
                        {
                            WorkingHoursId = 14,
                            Day = 3,
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            UserId = 7
                        },
                        new
                        {
                            WorkingHoursId = 15,
                            Day = 5,
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            UserId = 7
                        },
                        new
                        {
                            WorkingHoursId = 16,
                            Day = 1,
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 12, 0, 0, 0),
                            UserId = 8
                        },
                        new
                        {
                            WorkingHoursId = 17,
                            Day = 3,
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 12, 0, 0, 0),
                            UserId = 8
                        },
                        new
                        {
                            WorkingHoursId = 18,
                            Day = 4,
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 12, 0, 0, 0),
                            UserId = 8
                        },
                        new
                        {
                            WorkingHoursId = 19,
                            Day = 2,
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            UserId = 9
                        },
                        new
                        {
                            WorkingHoursId = 20,
                            Day = 4,
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            UserId = 9
                        },
                        new
                        {
                            WorkingHoursId = 21,
                            Day = 5,
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            UserId = 9
                        },
                        new
                        {
                            WorkingHoursId = 22,
                            Day = 1,
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 7, 0, 0, 0),
                            UserId = 10
                        },
                        new
                        {
                            WorkingHoursId = 23,
                            Day = 2,
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 7, 0, 0, 0),
                            UserId = 10
                        },
                        new
                        {
                            WorkingHoursId = 24,
                            Day = 4,
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 7, 0, 0, 0),
                            UserId = 10
                        },
                        new
                        {
                            WorkingHoursId = 25,
                            Day = 1,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 11, 0, 0, 0),
                            UserId = 11
                        },
                        new
                        {
                            WorkingHoursId = 26,
                            Day = 3,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 11, 0, 0, 0),
                            UserId = 11
                        },
                        new
                        {
                            WorkingHoursId = 27,
                            Day = 5,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 11, 0, 0, 0),
                            UserId = 11
                        },
                        new
                        {
                            WorkingHoursId = 28,
                            Day = 2,
                            EndTime = new TimeSpan(0, 19, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 13, 0, 0, 0),
                            UserId = 12
                        },
                        new
                        {
                            WorkingHoursId = 29,
                            Day = 3,
                            EndTime = new TimeSpan(0, 19, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 13, 0, 0, 0),
                            UserId = 12
                        },
                        new
                        {
                            WorkingHoursId = 30,
                            Day = 4,
                            EndTime = new TimeSpan(0, 19, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 13, 0, 0, 0),
                            UserId = 12
                        },
                        new
                        {
                            WorkingHoursId = 31,
                            Day = 1,
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            UserId = 13
                        },
                        new
                        {
                            WorkingHoursId = 32,
                            Day = 2,
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            UserId = 13
                        },
                        new
                        {
                            WorkingHoursId = 33,
                            Day = 3,
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            UserId = 13
                        },
                        new
                        {
                            WorkingHoursId = 34,
                            Day = 3,
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            UserId = 14
                        },
                        new
                        {
                            WorkingHoursId = 35,
                            Day = 4,
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            UserId = 14
                        },
                        new
                        {
                            WorkingHoursId = 36,
                            Day = 5,
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            UserId = 14
                        },
                        new
                        {
                            WorkingHoursId = 37,
                            Day = 1,
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            UserId = 15
                        },
                        new
                        {
                            WorkingHoursId = 38,
                            Day = 4,
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            UserId = 15
                        },
                        new
                        {
                            WorkingHoursId = 39,
                            Day = 5,
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            UserId = 15
                        },
                        new
                        {
                            WorkingHoursId = 40,
                            Day = 2,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            UserId = 16
                        },
                        new
                        {
                            WorkingHoursId = 41,
                            Day = 3,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            UserId = 16
                        },
                        new
                        {
                            WorkingHoursId = 42,
                            Day = 5,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            UserId = 16
                        },
                        new
                        {
                            WorkingHoursId = 43,
                            Day = 1,
                            EndTime = new TimeSpan(0, 13, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            UserId = 17
                        },
                        new
                        {
                            WorkingHoursId = 44,
                            Day = 4,
                            EndTime = new TimeSpan(0, 13, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            UserId = 17
                        },
                        new
                        {
                            WorkingHoursId = 45,
                            Day = 5,
                            EndTime = new TimeSpan(0, 13, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            UserId = 17
                        });
                });

            modelBuilder.Entity("HealthEase.Services.Database.Appointment", b =>
                {
                    b.HasOne("HealthEase.Services.Database.AppointmentType", "AppointmentType")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthEase.Services.Database.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthEase.Services.Database.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppointmentType");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthEase.Services.Database.Doctor", b =>
                {
                    b.HasOne("HealthEase.Services.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthEase.Services.Database.DoctorSpecialization", b =>
                {
                    b.HasOne("HealthEase.Services.Database.Doctor", "Doctor")
                        .WithMany("DoctorSpecializations")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthEase.Services.Database.Specialization", "Specialization")
                        .WithMany("DoctorSpecializations")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("HealthEase.Services.Database.MedicalRecord", b =>
                {
                    b.HasOne("HealthEase.Services.Database.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthEase.Services.Database.MedicalRecordEntry", b =>
                {
                    b.HasOne("HealthEase.Services.Database.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthEase.Services.Database.MedicalRecord", null)
                        .WithMany("Entries")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HealthEase.Services.Database.Message", b =>
                {
                    b.HasOne("HealthEase.Services.Database.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HealthEase.Services.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthEase.Services.Database.Notification", b =>
                {
                    b.HasOne("HealthEase.Services.Database.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthEase.Services.Database.PatientDoctorFavorite", b =>
                {
                    b.HasOne("HealthEase.Services.Database.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HealthEase.Services.Database.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthEase.Services.Database.Review", b =>
                {
                    b.HasOne("HealthEase.Services.Database.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HealthEase.Services.Database.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthEase.Services.Database.Patient", "Patient")
                        .WithMany("Reviews")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthEase.Services.Database.Transaction", b =>
                {
                    b.HasOne("HealthEase.Services.Database.Appointment", "Appointment")
                        .WithOne()
                        .HasForeignKey("HealthEase.Services.Database.Transaction", "AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HealthEase.Services.Database.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthEase.Services.Database.UserRole", b =>
                {
                    b.HasOne("HealthEase.Services.Database.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthEase.Services.Database.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthEase.Services.Database.WorkingHours", b =>
                {
                    b.HasOne("HealthEase.Services.Database.User", "User")
                        .WithMany("WorkingHours")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthEase.Services.Database.AppointmentType", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("HealthEase.Services.Database.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("DoctorSpecializations");
                });

            modelBuilder.Entity("HealthEase.Services.Database.MedicalRecord", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("HealthEase.Services.Database.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("HealthEase.Services.Database.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("HealthEase.Services.Database.Specialization", b =>
                {
                    b.Navigation("DoctorSpecializations");
                });

            modelBuilder.Entity("HealthEase.Services.Database.User", b =>
                {
                    b.Navigation("UserRoles");

                    b.Navigation("WorkingHours");
                });
#pragma warning restore 612, 618
        }
    }
}
