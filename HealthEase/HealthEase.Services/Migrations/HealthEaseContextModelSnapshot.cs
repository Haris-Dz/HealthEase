// <auto-generated />
using System;
using HealthEase.Services.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthEase.Services.Migrations
{
    [DbContext(typeof(HealthEaseContext))]
    partial class HealthEaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HealthEase.Services.Database.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime?>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AppointmentStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AppointmentId");

                    b.HasIndex("AppointmentStatusId");

                    b.HasIndex("PatientId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("HealthEase.Services.Database.AppointmentStatus", b =>
                {
                    b.Property<int>("AppointmentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentStatusId"));

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AppointmentStatusId");

                    b.ToTable("AppointmentStatuses");
                });

            modelBuilder.Entity("HealthEase.Services.Database.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("StateMachine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId");

                    b.HasIndex("UserId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            DoctorId = 1,
                            Biography = "Dr. Doctor1 is an experienced specialist in internal medicine. He has dedicated over 10 years to diagnosing and treating a wide range of chronic diseases, with a focus on patient-centered care and health education.",
                            IsDeleted = false,
                            ProfilePicture = new byte[] { 0 },
                            StateMachine = "draft",
                            Title = "Dr. med.",
                            UserId = 3
                        },
                        new
                        {
                            DoctorId = 2,
                            Biography = "Dr. Doctor2 is a double specialist in cardiology and neurology. With a strong academic background and clinical expertise, she combines knowledge from both fields to provide comprehensive diagnostic and treatment solutions.",
                            IsDeleted = false,
                            ProfilePicture = new byte[] { 0 },
                            StateMachine = "active",
                            Title = "Dr. sci. med.",
                            UserId = 4
                        },
                        new
                        {
                            DoctorId = 3,
                            Biography = "Dr. Doctor3 is a pediatrician with more than 7 years of experience in treating children of all ages. Known for a compassionate approach and excellent communication with both kids and parents.",
                            IsDeleted = false,
                            ProfilePicture = new byte[] { 0 },
                            StateMachine = "active",
                            Title = "Mr. sci. med.",
                            UserId = 5
                        },
                        new
                        {
                            DoctorId = 4,
                            Biography = "Dr. Doctor4 is a skilled dermatologist who has worked extensively with skin conditions ranging from acne to rare autoimmune diseases. She emphasizes early diagnosis and personalized treatment plans.",
                            IsDeleted = false,
                            ProfilePicture = new byte[] { 0 },
                            StateMachine = "active",
                            Title = "Dr. med.",
                            UserId = 6
                        });
                });

            modelBuilder.Entity("HealthEase.Services.Database.DoctorSpecialization", b =>
                {
                    b.Property<int>("DoctorSpecializationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorSpecializationId"));

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("int");

                    b.HasKey("DoctorSpecializationId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("DoctorSpecializations");

                    b.HasData(
                        new
                        {
                            DoctorSpecializationId = 1,
                            DoctorId = 1,
                            IsDeleted = false,
                            SpecializationId = 1
                        },
                        new
                        {
                            DoctorSpecializationId = 2,
                            DoctorId = 2,
                            IsDeleted = false,
                            SpecializationId = 1
                        },
                        new
                        {
                            DoctorSpecializationId = 3,
                            DoctorId = 2,
                            IsDeleted = false,
                            SpecializationId = 2
                        },
                        new
                        {
                            DoctorSpecializationId = 4,
                            DoctorId = 3,
                            IsDeleted = false,
                            SpecializationId = 3
                        },
                        new
                        {
                            DoctorSpecializationId = 5,
                            DoctorId = 4,
                            IsDeleted = false,
                            SpecializationId = 4
                        });
                });

            modelBuilder.Entity("HealthEase.Services.Database.MedicalRecord", b =>
                {
                    b.Property<int>("MedicalRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalRecordId"));

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("HealthConditions")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("MedicalRecordId");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("HealthEase.Services.Database.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex("PatientId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("HealthEase.Services.Database.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("PatientId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            PatientId = 1,
                            Email = "patient@mail.com",
                            FirstName = "Patient",
                            IsDeleted = false,
                            LastName = "Patient",
                            PasswordHash = "O44iKOh/G//phQTcSDoD6bvVYJA=",
                            PasswordSalt = "xJWRSHLNdETt+kIqCoBJFg==",
                            PhoneNumber = "000000003",
                            RegistrationDate = new DateTime(2025, 4, 14, 22, 13, 13, 0, DateTimeKind.Unspecified),
                            Username = "patient",
                            isActive = true
                        },
                        new
                        {
                            PatientId = 2,
                            Email = "patient1@mail.com",
                            FirstName = "Patient1",
                            IsDeleted = false,
                            LastName = "Patient1",
                            PasswordHash = "Y5PY6ThpfFSmRPQxSSgEEUfSMDc=",
                            PasswordSalt = "0gXuSZgjHZnAhePy8gl7RQ==",
                            PhoneNumber = "000000004",
                            RegistrationDate = new DateTime(2025, 4, 14, 22, 13, 13, 0, DateTimeKind.Unspecified),
                            Username = "patient1",
                            isActive = false
                        },
                        new
                        {
                            PatientId = 3,
                            Email = "patient2@mail.com",
                            FirstName = "Patient2",
                            IsDeleted = false,
                            LastName = "Patient2",
                            PasswordHash = "qIpSzM06en3MCcODqz5q0JhtBJQ=",
                            PasswordSalt = "+tA31RiJ9vyUd2Lgu5jgNQ==",
                            PhoneNumber = "000000005",
                            RegistrationDate = new DateTime(2025, 4, 14, 22, 13, 13, 0, DateTimeKind.Unspecified),
                            Username = "patient2",
                            isActive = true
                        });
                });

            modelBuilder.Entity("HealthEase.Services.Database.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PaymentStatusId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PaymentStatusId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("HealthEase.Services.Database.PaymentStatus", b =>
                {
                    b.Property<int>("PaymentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentStatusId"));

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentStatusId");

                    b.ToTable("PaymentStatuses");
                });

            modelBuilder.Entity("HealthEase.Services.Database.Prescription", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionId"));

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dosage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<string>("Medication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PrescriptionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PrescriptionStatusId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionId");

                    b.HasIndex("MedicalRecordId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PrescriptionStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("HealthEase.Services.Database.PrescriptionStatus", b =>
                {
                    b.Property<int>("PrescriptionStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionStatusId"));

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PrescriptionStatusId");

                    b.ToTable("PrescriptionStatuses");
                });

            modelBuilder.Entity("HealthEase.Services.Database.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("PatientId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("HealthEase.Services.Database.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Description = "Administrator with full access to settings, user permissions and platform operations.",
                            IsDeleted = false,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            Description = "Medical professional providing consultations and working with patients.",
                            IsDeleted = false,
                            RoleName = "Doctor"
                        },
                        new
                        {
                            RoleId = 3,
                            Description = "Supports doctors by managing appointments and assisting with patient coordination.",
                            IsDeleted = false,
                            RoleName = "Assistant"
                        });
                });

            modelBuilder.Entity("HealthEase.Services.Database.Specialization", b =>
                {
                    b.Property<int>("SpecializationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecializationId"));

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SpecializationId");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            SpecializationId = 1,
                            Description = "Specializes in diagnosing and treating diseases of the cardiovascular system.",
                            IsDeleted = false,
                            Name = "Cardiology"
                        },
                        new
                        {
                            SpecializationId = 2,
                            Description = "Focuses on the treatment of skin, hair, and nail disorders.",
                            IsDeleted = false,
                            Name = "Dermatology"
                        },
                        new
                        {
                            SpecializationId = 3,
                            Description = "Provides medical care for infants, children, and adolescents.",
                            IsDeleted = false,
                            Name = "Pediatrics"
                        },
                        new
                        {
                            SpecializationId = 4,
                            Description = "Deals with disorders of the nervous system including the brain and spinal cord.",
                            IsDeleted = false,
                            Name = "Neurology"
                        });
                });

            modelBuilder.Entity("HealthEase.Services.Database.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "1",
                            FirstName = "1",
                            IsDeleted = false,
                            LastName = "1",
                            PasswordHash = "XVDI7NKoOCtMiSrKR1uSSGWvA7o=",
                            PasswordSalt = "NHVv+8KhAiQqFlz7k1P53Q==",
                            PhoneNumber = "1",
                            Username = "1"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "admin@mail.com",
                            FirstName = "Admin",
                            IsDeleted = false,
                            LastName = "Admin",
                            PasswordHash = "wSG+yBth9HCj0O1AdRBL+CJjtR4=",
                            PasswordSalt = "c0MJh5XS8DYQtkJavp5lsA==",
                            PhoneNumber = "000000000",
                            Username = "admin"
                        },
                        new
                        {
                            UserId = 3,
                            Email = "doctor1@mail.com",
                            FirstName = "Doctor1",
                            IsDeleted = false,
                            LastName = "Doctor1",
                            PasswordHash = "uAQkJu5IuKT3FArAvq4E5KbBzRI=",
                            PasswordSalt = "ppASfJlw8D6P+mNsl7bqMA==",
                            PhoneNumber = "000000011",
                            Username = "doctor1"
                        },
                        new
                        {
                            UserId = 4,
                            Email = "doctor2@mail.com",
                            FirstName = "Doctor2",
                            IsDeleted = false,
                            LastName = "Doctor2",
                            PasswordHash = "uAQkJu5IuKT3FArAvq4E5KbBzRI=",
                            PasswordSalt = "ppASfJlw8D6P+mNsl7bqMA==",
                            PhoneNumber = "000000031",
                            Username = "doctor2"
                        },
                        new
                        {
                            UserId = 5,
                            Email = "doctor3@mail.com",
                            FirstName = "Doctor3",
                            IsDeleted = false,
                            LastName = "Doctor3",
                            PasswordHash = "uAQkJu5IuKT3FArAvq4E5KbBzRI=",
                            PasswordSalt = "ppASfJlw8D6P+mNsl7bqMA==",
                            PhoneNumber = "000000051",
                            Username = "doctor3"
                        },
                        new
                        {
                            UserId = 6,
                            Email = "doctor4@mail.com",
                            FirstName = "Doctor4",
                            IsDeleted = false,
                            LastName = "Doctor4",
                            PasswordHash = "uAQkJu5IuKT3FArAvq4E5KbBzRI=",
                            PasswordSalt = "ppASfJlw8D6P+mNsl7bqMA==",
                            PhoneNumber = "000000061",
                            Username = "doctor4"
                        },
                        new
                        {
                            UserId = 7,
                            Email = "assistant@mail.com",
                            FirstName = "Assistant",
                            IsDeleted = false,
                            LastName = "Assistant",
                            PasswordHash = "3JVNj98T0GrBkWatJPLYoaIqBEA=",
                            PasswordSalt = "/gLAN9q37ktD4sUpWLjN1g==",
                            PhoneNumber = "000000002",
                            Username = "assistant"
                        });
                });

            modelBuilder.Entity("HealthEase.Services.Database.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleId"));

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserRoleId = 1,
                            ChangeDate = new DateTime(2025, 3, 23, 22, 48, 41, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            UserRoleId = 2,
                            ChangeDate = new DateTime(2025, 3, 23, 22, 48, 41, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            RoleId = 1,
                            UserId = 2
                        },
                        new
                        {
                            UserRoleId = 3,
                            ChangeDate = new DateTime(2025, 3, 23, 22, 48, 41, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            RoleId = 2,
                            UserId = 3
                        },
                        new
                        {
                            UserRoleId = 4,
                            ChangeDate = new DateTime(2025, 3, 23, 22, 48, 41, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            RoleId = 2,
                            UserId = 4
                        },
                        new
                        {
                            UserRoleId = 5,
                            ChangeDate = new DateTime(2025, 3, 23, 22, 48, 41, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            RoleId = 2,
                            UserId = 5
                        },
                        new
                        {
                            UserRoleId = 6,
                            ChangeDate = new DateTime(2025, 3, 23, 22, 48, 41, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            RoleId = 2,
                            UserId = 6
                        },
                        new
                        {
                            UserRoleId = 7,
                            ChangeDate = new DateTime(2025, 3, 23, 22, 48, 41, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            RoleId = 3,
                            UserId = 7
                        });
                });

            modelBuilder.Entity("HealthEase.Services.Database.WorkingHours", b =>
                {
                    b.Property<int>("WorkingHoursId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkingHoursId"));

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("WorkingHoursId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("UserId");

                    b.ToTable("WorkingHours");

                    b.HasData(
                        new
                        {
                            WorkingHoursId = 1,
                            Day = 1,
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            UserId = 3
                        },
                        new
                        {
                            WorkingHoursId = 2,
                            Day = 2,
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            UserId = 3
                        },
                        new
                        {
                            WorkingHoursId = 3,
                            Day = 3,
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            UserId = 3
                        },
                        new
                        {
                            WorkingHoursId = 4,
                            Day = 4,
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            UserId = 3
                        },
                        new
                        {
                            WorkingHoursId = 5,
                            Day = 5,
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            UserId = 3
                        },
                        new
                        {
                            WorkingHoursId = 6,
                            Day = 1,
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            UserId = 4
                        },
                        new
                        {
                            WorkingHoursId = 7,
                            Day = 2,
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            UserId = 4
                        },
                        new
                        {
                            WorkingHoursId = 8,
                            Day = 3,
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            UserId = 4
                        },
                        new
                        {
                            WorkingHoursId = 9,
                            Day = 4,
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            UserId = 4
                        },
                        new
                        {
                            WorkingHoursId = 10,
                            Day = 5,
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            UserId = 4
                        },
                        new
                        {
                            WorkingHoursId = 11,
                            Day = 1,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            UserId = 5
                        },
                        new
                        {
                            WorkingHoursId = 12,
                            Day = 2,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            UserId = 5
                        },
                        new
                        {
                            WorkingHoursId = 13,
                            Day = 3,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            UserId = 5
                        },
                        new
                        {
                            WorkingHoursId = 14,
                            Day = 4,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            UserId = 5
                        },
                        new
                        {
                            WorkingHoursId = 15,
                            Day = 5,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            UserId = 5
                        },
                        new
                        {
                            WorkingHoursId = 16,
                            Day = 1,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            UserId = 6
                        },
                        new
                        {
                            WorkingHoursId = 17,
                            Day = 2,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            UserId = 6
                        },
                        new
                        {
                            WorkingHoursId = 18,
                            Day = 3,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            UserId = 6
                        },
                        new
                        {
                            WorkingHoursId = 19,
                            Day = 4,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            UserId = 6
                        },
                        new
                        {
                            WorkingHoursId = 20,
                            Day = 5,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            UserId = 6
                        });
                });

            modelBuilder.Entity("HealthEase.Services.Database.Appointment", b =>
                {
                    b.HasOne("HealthEase.Services.Database.AppointmentStatus", null)
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentStatusId");

                    b.HasOne("HealthEase.Services.Database.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthEase.Services.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthEase.Services.Database.Doctor", b =>
                {
                    b.HasOne("HealthEase.Services.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthEase.Services.Database.DoctorSpecialization", b =>
                {
                    b.HasOne("HealthEase.Services.Database.Doctor", "Doctor")
                        .WithMany("DoctorSpecializations")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthEase.Services.Database.Specialization", "Specialization")
                        .WithMany("DoctorSpecializations")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("HealthEase.Services.Database.MedicalRecord", b =>
                {
                    b.HasOne("HealthEase.Services.Database.Patient", "Patient")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthEase.Services.Database.Notification", b =>
                {
                    b.HasOne("HealthEase.Services.Database.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthEase.Services.Database.Payment", b =>
                {
                    b.HasOne("HealthEase.Services.Database.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthEase.Services.Database.PaymentStatus", null)
                        .WithMany("Payments")
                        .HasForeignKey("PaymentStatusId");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthEase.Services.Database.Prescription", b =>
                {
                    b.HasOne("HealthEase.Services.Database.MedicalRecord", null)
                        .WithMany("Prescriptions")
                        .HasForeignKey("MedicalRecordId");

                    b.HasOne("HealthEase.Services.Database.Patient", "Patient")
                        .WithMany("Prescriptions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthEase.Services.Database.PrescriptionStatus", null)
                        .WithMany("Prescriptions")
                        .HasForeignKey("PrescriptionStatusId");

                    b.HasOne("HealthEase.Services.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthEase.Services.Database.Review", b =>
                {
                    b.HasOne("HealthEase.Services.Database.Patient", "Patient")
                        .WithMany("Reviews")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthEase.Services.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthEase.Services.Database.UserRole", b =>
                {
                    b.HasOne("HealthEase.Services.Database.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthEase.Services.Database.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthEase.Services.Database.WorkingHours", b =>
                {
                    b.HasOne("HealthEase.Services.Database.Doctor", null)
                        .WithMany("WorkingHours")
                        .HasForeignKey("DoctorId");

                    b.HasOne("HealthEase.Services.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthEase.Services.Database.AppointmentStatus", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("HealthEase.Services.Database.Doctor", b =>
                {
                    b.Navigation("DoctorSpecializations");

                    b.Navigation("WorkingHours");
                });

            modelBuilder.Entity("HealthEase.Services.Database.MedicalRecord", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("HealthEase.Services.Database.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("MedicalRecords");

                    b.Navigation("Prescriptions");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("HealthEase.Services.Database.PaymentStatus", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("HealthEase.Services.Database.PrescriptionStatus", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("HealthEase.Services.Database.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("HealthEase.Services.Database.Specialization", b =>
                {
                    b.Navigation("DoctorSpecializations");
                });

            modelBuilder.Entity("HealthEase.Services.Database.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
